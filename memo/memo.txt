*4/23

P!ssw0rd

로그인
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터가 유효한 데이터인지 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리

(userId, userPassword)

2. 데이터베이스의 user 테이블에서 userId에 해당하는 유저 레코드 조회
select * FROM user Where userId = :userId and userPassword =:userPassword


아이디 중복확인
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터가 유효한 데이터인지 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리

(userId)

2. 데이터베이스의 user 테이블에서 해당하는 userId를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DI' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 'SU' 응답 처리


이메일 인증
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리

(userEmail)

2. 데이터베이스의 user 테이블에서 해당하는 userEmail을 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DE' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 4자리의 인증 번호를 생성

4. email_auth_number 테이블에 userEmail과 생성한 4자리의 인증 번호를 저장
4.1 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

5. userEmail에 생성한 4자리의 인증 번호를 전송
5.1 만약 이메일 전송 중에 에러가 발생하면 데이터베이스의 email_auth_number 테이블에 저장한 데이터를 삭제
5.2 만약 이메일 전송 중에 에러가 발생하면 'MF' 응답 처리

6. 'SU' 응답 처리


이메일 인증확인
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리

(userEmail, authNumber)

2. 데이터베이스의 email_auth_number 테이블에서 해당하는 userEmail과 authNumber를 모두 가지고 있는 
데이터가 있는지 확인
2.1 해당하는 데이터가 없다면 'AF' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 'SU' 응답 처리


회원가입
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리

(userId, userPassword, userEmail, authNumber)

2. 데이터베이스의 user 테이블에서 해당하는 userId를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DI' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

3. 데이터베이스의 user 테이블에서 해당하는 userEmail을 가지고 있는 유저가 있는지 확인
3.1 만약 가지고 있는 유저가 존재하면 'DE' 응답 처리
3.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

4. 데이터베이스의 email_auth_number 테이블에서 해당하는 userEmail과 authNumber를 모두 가지고 있는 
데이터가 있는지 확인
4.1 해당하는 데이터가 없다면 'AF' 응답 처리
4.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

5. 사용자로부터 입력받은 userPassword를 암호화

6. 사용자로 부터 입력받은 userId, userEmail, 암호화한 password, 지정된 권한, 가입경로를 사용하여 데이터베이스의
user 테이블에 레코드를 삽입
6.1 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리

7. 'SU' 응답 처리

* 프론트 생성
npx create-react-app font-app --template typescript

* 백앤드 생성


실행되는지 부터 확인
npm run start


DI : 의존성 주입
IOC : 제어의 역전
AOP : 관점 지향 프로그래밍 


응답 : 성공
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
{
 "code": "SU",
 "message": Success.",
}

응답 : 실패 (필수 데이터 미입력)
HTTP/1.1. 400 Bad Request
Content-Type: application/json;charset=UTF-8
{
 "code": "VF",
 "message": "Varidation Failed."
}

응답 : 실패 (중복된 아이디)
HTTP/1.1. 400 Bad Request
Content-Type: application/json;charset=UTF-8
{
 "code": "DI",
 "message": "Duplicatied Id."
}

응답 : 실패 (중복된 이메일)
HTTP/1.1. 400 Bad Request
Content-Type: application/json;charset=UTF-8
{
 "code": "DE",
 "message": "Duplicatied Email."
}

응답 : 실패 (이메일 인증 실패)
HTTP/1.1. 401 Unauthorized
Content-Type: application/json;charset=UTF-8
{
 "code": "AF",
 "message": "Authentication Failed."
}

응답 : 실패 (데이터베이스 오류)
HTTP/1.1 500 Internal Server Error
Content-Type: application/json;charset=UTF-8
{
 "code": "DBE",
 "message": "Database Error"
}

*4/24

UUID 생성기
6C41FAC2-4265-4EA3-967F-C1BCF0A2B64F


JwtAuthenticationFilter
확장(extends OncePerRequestFilter) + 빠른수정

SELECT *
FROM user
WHERE user_id = :userId

-> 

findByUserId(userId)
existsByUserId(userId)   > 있다없다만 판단

ResponseCode 작성

200 성공 : SU / Success
400 필수 데이터 미입력 : VF / Varidation Failed
400 중복된 아이디 : DI / Duplicatied Id
400 중복된 이메일 : DE / Duplicatied Email
401 로그인 정보 불일치 : SF / Sign in Failed
401 인증 실패 : AF / Authentication Failed
500 토큰 생성 실패 : TF / Token creation Failed
500 이메일 전송 실패 : MF / Mail send Failed
500 데이터베이스 오류 : DBE / Database Error


클래스로 매서드로 직접 접근 static

ResponseEntity의 제너릭타입 <>
? extend A  > A 혹은 A의 자손들

? super B  > B 혹은 B의 조상들


*4/25 
구글 앱 비밀번호 juup jjxo xxrq heaq


인증번호 확인
SELECT *
FROM user
WHERE user_ email = :userEmail
AND auth_number  = :authNumber

findByUserEmailAndAuthNumber
existsByUserEmailAndAuthNumber(String userEmail, String authNumber)

패스워드 암호화 - 패스워드 인코더

정규식 검사 사이트 : https://regex101.com/